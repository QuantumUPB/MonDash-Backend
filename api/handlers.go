package api

import (
	"encoding/json"
	"net/http"

	"mondash-backend/domain"
	"mondash-backend/logger"
	"mondash-backend/services"
)

// HealthcheckHandler returns status OK.
func HealthcheckHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("ok"))
}

// UpdateNodeRequest is the expected payload for updating nodes.
// The timestamp for each node is generated by the service layer.
type NodePayload struct {
	Name           string  `json:"name"`
	Status         string  `json:"status"`
	StoredKeyCount int     `json:"stored_key_count"`
	CurrentKeyRate float64 `json:"current_key_rate"`
}

type UpdateNodeRequest struct {
	Nodes []NodePayload `json:"nodes"`
}

// UpdateNodeHandler handles node update requests.
func UpdateNodeHandler(s *services.NodeService) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req UpdateNodeRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		var nodes []domain.Node
		for _, n := range req.Nodes {
			nodes = append(nodes, domain.Node{
				Name:           n.Name,
				Status:         n.Status,
				StoredKeyCount: n.StoredKeyCount,
				CurrentKeyRate: n.CurrentKeyRate,
			})
		}
		_ = s.Update(nodes)
		w.WriteHeader(http.StatusOK)
	}
}

// UpdateAppRequest is the expected payload for updating an app.
type UpdateAppRequest struct {
	NodeID       string `json:"nodeId"`
	Name         string `json:"name"`
	NumberOfKeys int    `json:"numberOfKeys"`
	KeySize      int    `json:"keySize"`
}

// UpdateAppHandler handles app update requests.
func UpdateAppHandler(s *services.AppService) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req UpdateAppRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		logger.Log.Infow("app update", "nodeId", req.NodeID, "name", req.Name, "numberOfKeys", req.NumberOfKeys, "keySize", req.KeySize)
		_ = s.Update(&domain.App{
			NodeID:       req.NodeID,
			Name:         req.Name,
			NumberOfKeys: req.NumberOfKeys,
			KeySize:      req.KeySize,
		})
		w.WriteHeader(http.StatusOK)
	}
}
